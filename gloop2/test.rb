class VendingMachine
  # ステップ０　お金の投入と払い戻しの例コード
  # ステップ１　扱えないお金の例コード
  # 10円玉、50円玉、100円玉、500円玉、1000円札を１つずつ投入できる。
  MONEY = [10, 50, 100, 500, 1000].freeze
  # （自動販売機に投入された金額をインスタンス変数の @slot_money に代入する）
  def initialize
    # 最初の自動販売機に入っている金額は0円
    @slot_money = 0
  end
  # 投入金額の総計を取得できる。
  #タスク２ 自販機内の投入した金額の合計値をユーザにわかるように出力する
  #安達さん
  def current_slot_money
    # 自動販売機に入っているお金を表示する
    @slot_money
  end
  # 10円玉、50円玉、100円玉、500円玉、1000円札を１つずつ投入できる。
  # 投入は複数回できる。
  #タスク1(完了) (money)に値(お金)を渡す処理を実装する
  def slot_money(money)
    # 想定外のもの（１円玉や５円玉。千円札以外のお札、そもそもお金じゃないもの（数字以外のもの）など）
    # が投入された場合は、投入金額に加算せず、それをそのまま釣り銭としてユーザに出力する。
    return false unless MONEY.include?(money)
    # 自動販売機にお金を入れる
    @slot_money += money
  end
  # 払い戻し操作を行うと、投入金額の総計を釣り銭として出力する。
  # 完了
  def return_money
    # 返すお金の金額を表示する
    puts @slot_money
    # 自動販売機に入っているお金を0円に戻す
    @slot_money = 0
  end
  #ステップ２ジュースの管理
  #値段と名前の属性からなるジュースを１種類格納できる。初期状態で、コーラ（値段:120円、名前“コーラ“）を5本格納している。
  #格納されているジュースの情報（値段と名前と在庫）を取得できる。
  #注意：責務を持ちすぎていませんか？責任を持ちすぎていたら分割しましょう
  #タスク３ 佐々木さん
  def juice_initialize
    @drink = [{name:"redbull", price:200, stock:5},
    {name:"cola", price:120, stock:5},
    {name:"water", price:100, stock:5}]
    #値段と名前の属性からなるジュースを１種類格納できる。初期状態で、コーラ（値段:120円、名前“コーラ“）を5本格納している。
  end
  #タスク４ 佐々木さん
  def juice_status
    @drink#格納されているジュースの情報（値段と名前と在庫）を取得できる。
  end
end
